desmodF[-dupDes,]
desmodFD <- desmodF[!dupDes,]
desmodF <- desGbifCd[-i,]
plot(wrld_simpl, xlim=c(-50,0), ylim=c(-50,45), axes=TRUE, col="light yellow")
plot(wrld_simpl, xlim=c(-50,0), ylim=c(-50,45), axes=TRUE, col="light yellow")
points(desmodF$lon, desmodF$lat, bg='red', pch=21, cex=1)
us <- which(desmodF$country=="United States")
desmodF <- desmodF[-us, ]
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
plot(desmodF$lon, desmodF$lat, bg='orange', pch=21, cex=0.75)
xp <- extract(maskU, desmodF)
library(dismo)
mask <- raster(files[1])
values(maskU) <- 1:ncell(mask)
xp <- extract(maskU, desmodF)
xp <- extract(mask, desmodF)
class(desmodF)
coordinates(desmodF) <- ~lon+lat
projection(desmodF) <- CRS('+proj=longlat +datum=WGS84')
class(desmodF)
xp <- extract(mask, desmodF)
length(xp) #la cantidad de puntos que tenemos
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
dupDes <- which(duplicated(xp))
desmodFD <- desmodF[!dupDes,]
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
#graficamos nuevamente
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
plot(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
desmodFD
desGbif <- read.csv("desGbif.csv")
sa <- which(desGbif$lon>100)
library(maptools)
plot(wrld_simpl, xlim=c(-100,40), ylim=c(-60,40), axes=TRUE, col="light yellow")
box()
library(maptools)
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-100,40), ylim=c(-60,40), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(desGbif$lon, desGbif$lat, bg='orange', pch=21, cex=0.75)
# plot points again to add a border, for better visibility
points(desmod$lon, desmod$lat, col='red', cex=0.75)
desmod <- read_excel("Ocurrencia Desmodus.xlsx")
library(readxl)
desmod <- read_excel("Ocurrencia Desmodus.xlsx")
points(desmod$lon, desmod$lat, col='red', cex=0.75)
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-100,40), ylim=c(-60,40), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(desGbif$lon, desGbif$lat, bg='orange', pch=21, cex=0.75)
# plot points again to add a border, for better visibility
points(desmod$lon, desmod$lat, col='red', cex=0.75)
dupl <- duplicated(desGbif[, c('lon', 'lat')])
sum(dupl)
desGbifCd <- desGbif[!dupl,]
lolNA <- which(is.na(desGbifCd$lon)&is.na(desGbifCd$lat))
desGbifCd <- desGbifCd[-lolNA,]
library(sp)
csDes <- desGbifCd
coordinates(csDes) <-  ~lon+lat
crs(csDes) <- crs(wrld_simpl)
class(csDes)
ovr <- over(csDes, wrld_simpl)
ovr <- over(csDes, wrld_simpl)
head(ovr)
cntr <- ovr$NAME
i <- which(is.na(cntr))
length(i) #Cuantos datos sin país
j <- which(as.character(cntr)==as.character(csDes$country))
cbind.data.frame(cntr, csDes$country)[-c(j,i),]
us <- which(desmodF$country=="United States")
desmodF <- desmodF[-us, ]
desmodF <- desGbifCd[-i,]
us <- which(desmodF$country=="United States")
desmodF <- desmodF[-us, ]
library(dismo)
mask <- raster(files[1])
maskU <- mask
values(maskU) <- 1:ncell(mask)
mask <- raster(files[1])
files <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''),  pattern='grd',  full.names=TRUE )
mask <- raster(files[1])
maskU <- mask
values(maskU) <- 1:ncell(mask)
desRep <- desmodF
coordinates(desRep) <- ~lon+lat
projection(desRep) <- CRS('+proj=longlat +datum=WGS84')
xp <- extract(mask, desRep)
length(xp) #la cantidad de puntos que tenemos
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
dupDes <- which(duplicated(xp))
desmodFD <- desmodF[!dupDes,]
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
desmodFD <- desmodF[-dupDes,]
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
# incluimos los puntos
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
set.seed(1963)
e <- extent(-85, -70, -10, 5)
bg2 <- randomPoints(mask, 50, ext=e)
par(mfrow=c(1,2), mar=c(3,3,1,1))
plot(!is.na(mask), legend=FALSE)
bg <- randomPoints(mask, 500 )
#generamos un cuadrante donde generar los datos aleatorios
e <- extent(-85, -70, -10, 5)
bg2 <- randomPoints(mask, 50, ext=e)
# set up the plotting area for two maps
par(mfrow=c(1,2), mar=c(3,3,1,1))
plot(!is.na(mask), legend=FALSE)
points(bg, cex=0.3, pch=21)
# now we repeat the sampling, but limit
# the area of sampling using a spatial extent
plot(!is.na(mask), legend=FALSE)
plot(e, add=TRUE, col='red')
points(bg2, cex=0.3, pch=21)
x <- circles(desmodF, d=50000, lonlat=TRUE)
pol <- polygons(x)
x <- circles(desmodF, d=50000, lonlat=TRUE)
x <- circles(desmodF, d=50000, lonlat=TRUE)
x <- circles(desRep, d=50000, lonlat=TRUE)
x <- circles(desRep, d=50000, lonlat=TRUE)
x <- circles(desRep, d=50000, lonlat=TRUE)
pol <- polygons(x)
set.seed(34)
samp1 <- spsample(pol, 250, type='random', iter=25)
samp1 <- spsample(pol, 250, type='random', iter=25)
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
cells <- unique(cells
length(cells) #23 puntos estaban en una misma celda
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
cells <- unique(cells)
length(cells) #23 puntos estaban en una misma celda
xy <- xyFromCell(mask, cells)
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
desmodF <- desGbifCd[-i,]
us <- which(desmodF$country=="United States")
sa <- which(desGbif$lon>100)
desmodF <- desmodF[-c(us,sa), ]
desRep <- desmodF
coordinates(desRep) <- ~lon+lat
projection(desRep) <- CRS('+proj=longlat +datum=WGS84')
xp <- extract(mask, desRep)
length(xp) #la cantidad de puntos que tenemos
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
dupDes <- which(duplicated(xp))
desmodFD <- desmodF[-dupDes,]
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
x <- circles(desRep, d=50000, lonlat=TRUE)
x <- circles(desRep, d=50000, lonlat=TRUE)
pol <- polygons(x)
set.seed(34)
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
cells <- unique(cells)
length(cells) #23 puntos estaban en una misma celda
xy <- xyFromCell(mask, cells)
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
desFD <- desmodFD
coordinates(desFD) <- ~lon+lat
projection(desFD) <- CRS('+proj=longlat +datum=WGS84')
x <- circles(desFD, d=50000, lonlat=TRUE)
pol <- polygons(x)
set.seed(34)
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
cells <- unique(cells)
length(cells) #23 puntos estaban en una misma celda
xy <- xyFromCell(mask, cells)
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
spxy <- SpatialPoints(xy, proj4string=CRS('+proj=longlat +datum=WGS84'))
o <- over(spxy, geometry(x))
xyInside <- xy[!is.na(o), ]
spxy <- SpatialPoints(xy, proj4string=CRS('+proj=longlat +datum=WGS84'))
xy
spxy <- SpatialPoints(na.omit(xy), proj4string=CRS('+proj=longlat +datum=WGS84'))
o <- over(spxy, geometry(x))
xyInside <- xy[!is.na(o), ]
plot(pol, axes=TRUE)
points(xyInside, cex=0.4, pch=3, col='blue')
library(readxl)
desmod <- read_excel("Ocurrencia Desmodus.xlsx")
library(dismo)
# Usar las dos lineas de código a continuación para extraer
#los datos de GBIF y guardarlos en su computador
# desGbif <- gbif("Desmodus", "rotundus", geo = TRUE)
# write.csv(desGbif, "desGbif.csv")
#La siguiente vez que ejecute solo lee los datos del disco duro
desGbif <- read.csv("desGbif.csv")
library(maptools)
## Checking rgeos availability: TRUE
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-100,40), ylim=c(-60,40), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(desGbif$lon, desGbif$lat, bg='orange', pch=21, cex=0.75)
# plot points again to add a border, for better visibility
points(desmod$lon, desmod$lat, col='red', cex=0.75)
dupl <- duplicated(desGbif[, c('lon', 'lat')])
#Cuantos datos duplicados tenemos
sum(dupl)
#Tenemos 16951 datos duplicados que deberíamos excluir
#Usamos este vector para eliminar los duplicados
desGbifCd <- desGbif[!dupl,]
lolNA <- which(is.na(desGbifCd$lon)&is.na(desGbifCd$lat))
desGbifCd <- desGbifCd[-lolNA,]
library(sp)
csDes <- desGbifCd
csDes$country <- droplevels(csDes$country, exclude = 0)
coordinates(csDes) <-  ~lon+lat
crs(csDes) <- crs(wrld_simpl)
class(csDes)
ovr <- over(csDes, wrld_simpl)
head(ovr)
cntr <- ovr$NAME
#which nos permite ver la ubicación de los puntos
i <- which(is.na(cntr))
length(i) #Cuantos datos sin país
#Definimos las ocurrencias que coinciden
j <- which(as.character(cntr)==as.character(csDes$country))
#vemos a que corresponden los datos que no coinciden
cbind.data.frame(cntr, csDes$country)[-c(j,i),]
#removemos los datos que con ubicación NA
desmodF <- desGbifCd[-i,]
#Ubicamos el país
us <- which(desmodF$country=="United States")
#Registros sobre 100 grados de longitud
sa <- which(desGbif$lon>100)
desmodF <- desmodF[-c(us,sa), ]
library(dismo)
# Obtenemos los datos del paquete dismo
files <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''),  pattern='grd',  full.names=TRUE )
#Usamos el primer raster para obtener la mascara
mask <- raster(files[1])
maskU <- mask
values(maskU) <- 1:ncell(mask)
#convertimos en un objeto tipo SpatialPointDataFrame
desRep <- desmodF
coordinates(desRep) <- ~lon+lat
projection(desRep) <- CRS('+proj=longlat +datum=WGS84')
#Usamos extrac para obtener el valor de cada punto de ocurrencia
xp <- extract(mask, desRep)
length(xp) #la cantidad de puntos que tenemos
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
#500 metros
#definimos la ubicación de los duplicados
dupDes <- which(duplicated(xp))
#usamos este vector para eliminar duplicados
desmodFD <- desmodF[-dupDes,]
#graficamos nuevamente
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
# incluimos los puntos
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
sa
# Seleccionamos 500 puntos aleatorios
#aseguramos tener los mismos datos aleatorios
set.seed(1963)
#Generamos los datos aleatorios
bg <- randomPoints(mask, 500 )
#generamos un cuadrante donde generar los datos aleatorios
e <- extent(-85, -70, -10, 5)
bg2 <- randomPoints(mask, 50, ext=e)
# set up the plotting area for two maps
par(mfrow=c(1,2), mar=c(3,3,1,1))
plot(!is.na(mask), legend=FALSE)
points(bg, cex=0.3, pch=21)
# now we repeat the sampling, but limit
# the area of sampling using a spatial extent
plot(!is.na(mask), legend=FALSE)
plot(e, add=TRUE, col='red')
points(bg2, cex=0.3, pch=21)
#generamos un objeto tipo SpatialPoint
desFD <- desmodFD
coordinates(desFD) <- ~lon+lat
projection(desFD) <- CRS('+proj=longlat +datum=WGS84')
# Generamos circulos con un radio de 50 km
# usamos el objeto tipo SpatialPointDataFrame
x <- circles(desFD, d=50000, lonlat=TRUE)
## Lo convertimos en un polígono
pol <- polygons(x)
# Muestreamos aleatoreamente dentro del polígono
# extraemos 250 puntos
set.seed(34)
samp1 <- spsample(pol, 250, type='random', iter=25)
# Extraemos el valor para cada punto de la mascara
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
#Eliminamos puntos repetidos
#Los puntos que tengan el mismo valor serán aquellos que
#estan dentro de una misma celda
cells <- unique(cells)
length(cells) #17 puntos estaban en una misma celda
#los eliminamos y nos quedan 233 puntos
#obtenemos las coordenadas de esos puntos
xy <- xyFromCell(mask, cells)
##Graficamos
plot(pol, axes=TRUE)
points(xyInside, cex=0.4, pch=3, col='blue')
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
which(desGbif$lon>80)
which(desmodF$lon>80)
desmodF <- desmodF[-c(us,sa), ]
which(desmodF$lon>80)
-c(us,sa)
desmodF <- desGbifCd[-i,]
desmodF <- desmodF[-c(us,sa), ]
sa <- which(desmodF$lon>80)
desmodF <- desmodF[-c(us,sa), ]
desmodF <- desGbifCd[-i,]
us <- which(desmodF$country=="United States")
sa <- which(desmodF$lon>80)
desmodF <- desmodF[-c(us,sa), ]
library(dismo)
# Obtenemos los datos del paquete dismo
files <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''),  pattern='grd',  full.names=TRUE )
#Usamos el primer raster para obtener la mascara
mask <- raster(files[1])
maskU <- mask
values(maskU) <- 1:ncell(mask)
#convertimos en un objeto tipo SpatialPointDataFrame
desRep <- desmodF
coordinates(desRep) <- ~lon+lat
projection(desRep) <- CRS('+proj=longlat +datum=WGS84')
#Usamos extrac para obtener el valor de cada punto de ocurrencia
xp <- extract(mask, desRep)
length(xp) #la cantidad de puntos que tenemos
length(unique(xp)) #la cantidad de puntos con una ubicación mayor a
#500 metros
#definimos la ubicación de los duplicados
dupDes <- which(duplicated(xp))
#usamos este vector para eliminar duplicados
desmodFD <- desmodF[-dupDes,]
#graficamos nuevamente
plot(wrld_simpl, xlim=c(-100,50), ylim=c(-50,30), axes=TRUE, col="light yellow")
box()
# incluimos los puntos
points(desmodFD$lon, desmodFD$lat, bg='orange', pch=21, cex=0.75)
# Seleccionamos 500 puntos aleatorios
#aseguramos tener los mismos datos aleatorios
set.seed(1963)
#Generamos los datos aleatorios
bg <- randomPoints(mask, 500 )
#generamos un cuadrante donde generar los datos aleatorios
e <- extent(-85, -70, -10, 5)
bg2 <- randomPoints(mask, 50, ext=e)
# set up the plotting area for two maps
par(mfrow=c(1,2), mar=c(3,3,1,1))
plot(!is.na(mask), legend=FALSE)
points(bg, cex=0.3, pch=21)
# now we repeat the sampling, but limit
# the area of sampling using a spatial extent
plot(!is.na(mask), legend=FALSE)
plot(e, add=TRUE, col='red')
points(bg2, cex=0.3, pch=21)
#generamos un objeto tipo SpatialPoint
desFD <- desmodFD
coordinates(desFD) <- ~lon+lat
projection(desFD) <- CRS('+proj=longlat +datum=WGS84')
# Generamos circulos con un radio de 50 km
# usamos el objeto tipo SpatialPointDataFrame
x <- circles(desFD, d=50000, lonlat=TRUE)
## Lo convertimos en un polígono
pol <- polygons(x)
# Muestreamos aleatoreamente dentro del polígono
# extraemos 250 puntos
set.seed(34)
samp1 <- spsample(pol, 250, type='random', iter=25)
# Extraemos el valor para cada punto de la mascara
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
#Eliminamos puntos repetidos
#Los puntos que tengan el mismo valor serán aquellos que
#estan dentro de una misma celda
cells <- unique(cells)
length(cells) #17 puntos estaban en una misma celda
#los eliminamos y nos quedan 233 puntos
#obtenemos las coordenadas de esos puntos
xy <- xyFromCell(mask, cells)
##Graficamos
plot(pol, axes=TRUE)
points(xy, cex=0.4, pch=3, col='blue')
spxy <- SpatialPoints(na.omit(xy), proj4string=CRS('+proj=longlat +datum=WGS84'))
o <- over(spxy, geometry(x))
xyInside <- xy[!is.na(o), ]
points(xyInside, cex=0.4, pch=3, col='blue')
plot(pol, axes=TRUE)
points(xyInside, cex=0.4, pch=3, col='blue')
desFD <- desmodF
coordinates(desFD) <- ~lon+lat
projection(desFD) <- CRS('+proj=longlat +datum=WGS84')
x <- circles(desFD, d=50000, lonlat=TRUE)
x <- circles(desFD, d=50000, lonlat=TRUE)
pol <- polygons(x)
# Muestreamos aleatoreamente dentro del polígono
# extraemos 250 puntos
set.seed(34)
samp1 <- spsample(pol, 250, type='random', iter=25)
# Extraemos el valor para cada punto de la mascara
cells <- cellFromXY(mask, samp1)
length(cells) #tenemos 250 puntos los que generamos
#Eliminamos puntos repetidos
#Los puntos que tengan el mismo valor serán aquellos que
#estan dentro de una misma celda
cells <- unique(cells)
length(cells) #17 puntos estaban en una misma celda
#los eliminamos y nos quedan 233 puntos
#obtenemos las coordenadas de esos puntos
xy <- xyFromCell(mask, cells)
##Graficamos
plot(pol, axes=TRUE)
points(xyInside, cex=0.4, pch=3, col='blue')
spxy <- SpatialPoints(na.omit(xy), proj4string=CRS('+proj=longlat +datum=WGS84'))
o <- over(spxy, geometry(x))
xyInside <- xy[!is.na(o), ]
#Definimos el directorio donde estan los archivos
path <- file.path(system.file(package="dismo"), 'ex')
#obtenemos un listado de las variables tipo grd (grid) que estan en dismo
#grd$ nos permite obtener todos las variables grid
library(dismo)
files <- list.files(path, pattern='grd$', full.names=TRUE )
files
#empaquetamos las variables en un stack
predictors <- stack(files)
predictors
names(predictors)
plot(predictors)
library(maptools)
data(wrld_simpl)
# Graficamos la primera variable climática
plot(predictors, 1)
#Addicionamos los límites políticos
#usamos add=TRUE para que se sobreponga sobre el gráfico anterior
plot(wrld_simpl, add=TRUE)
#finalmente adicionamos los datos de Desmodus
points(desmodF, col=rgb(0,0,0,0.3), pch=3, cex=0.3)
#extraemos los valores
presvals <- extract(predictors, desmodF) #presencias
presvals <- extract(predictors, desmodFD) #presencias
presvals <- extract(predictors, desFD) #presencias
absvals <- extract(predictors, bg) #datos de fondo
seabsvals <- extract(predictors, xy) #pseudo-ausencias
pb <- c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
seabsvals <- extract(predictors, xyInside) #pseudo-ausencias
pb <- c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
sdmdata <- data.frame(cbind(pb, rbind(presvals, absvals)))
sdmdata[,'biome'] = as.factor(sdmdata[,'biome'])
head(sdmdata)
pairs(sdmdata[,2:5], cex=0.1)
points(desFD, col=rgb(0,0,0,0.3), pch=3, cex=0.3)
plot(predictors, 1)
#Addicionamos los límites políticos
#usamos add=TRUE para que se sobreponga sobre el gráfico anterior
plot(wrld_simpl, add=TRUE)
#finalmente adicionamos los datos de Desmodus
points(desFD, col=rgb(0,0,0,0.3), pch=3, cex=0.3)
desFD
library(maptools)
desFD <- desmodFD
coordinates(desFD) <- ~lon+lat
projection(desFD) <- CRS('+proj=longlat +datum=WGS84')
plot(predictors, 1)
plot(predictors, 1)
#Addicionamos los límites políticos
#usamos add=TRUE para que se sobreponga sobre el gráfico anterior
plot(wrld_simpl, add=TRUE)
#finalmente adicionamos los datos de Desmodus
points(desFD, col=rgb(0,0,0,0.3), pch=3, cex=0.3)
# Graficamos la primera variable climática
plot(predictors, 1)
#Addicionamos los límites políticos
#usamos add=TRUE para que se sobreponga sobre el gráfico anterior
plot(wrld_simpl, add=TRUE)
#finalmente adicionamos los datos de Desmodus
points(desFD, col="darkred", pch=3, cex=0.3)
